@page "/content"
@inherits BasePageComponent
@using Pds.Api.Contracts.Content
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Core.Enums
@using static Pds.Web.Common.TitleExtension 

@using System.Linq
@using Pds.Core.Extensions
@using Pds.Web.Models.Content

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Контент")</Title>

@if (content == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
         Лента контента (@content.Items.Count(i => i.IsVisible))
         <a href="/content/add" class="btn btn-success" >Добавить</a>
     </h4>
    <Filter OnFilterUpdate="@FilterUpdatedAsync"></Filter>
    <table class="table">
        <thead>
        <tr>
            <th class="release-date-header">Когда</th>
            <th>Название</th>
            <th>Бренд</th>
            <th>Клиент</th>
            <th>Соцсеть</th>
            <th>Тип</th>
            <th class="bill-cost-header">Сколько</th>
            <th class="text-center actions-header">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in content.Items.Where(i => i.IsVisible))
        {
            <tr class="@ContentHelper.GetContentBgColorClass(item.Status, item.Bill)">
                <td class="release-date-row">
                    <span>
                        @item.ReleaseDate.Date.ToShortStringDateWithDay()
                    </span>
                </td>
                <td class="title-row">
                    <a href="content/@item.Id">@item.Title</a>
                </td>
                <td>
                    @item.Brand.Name
                </td>
                <td>
                    @item.ClientName
                </td>
                <td>
                    @EnumsTranslator.SocialMediaTypeToRu(item.SocialMediaType)
                </td>
                <td>
                    @EnumsTranslator.ContentTypeToRu(item.Type)
                </td>
                <td class="bill-cost-row">
                    @if (item.Bill != null)
                    {
                        if (item.Bill.PaymentType != null)
                        {
                            <i class="@ContentHelper.GetPaymentTypeBgColorClass(item.Bill.PaymentType)">
                                @EnumsTranslator.PaymentTypeToShortRu(item.Bill.PaymentType)
                            </i>

                        }
                        else
                        {
                            <span class="free-cost">бесплатно</span>
                        }
                    </td>
                    <td class="text-center actions-row">
                        <Actions OnContentUpdate="@ContentInfoUpdate" CurrentContent="@item"></Actions>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GetContentsResponse content;

    protected override async Task OnInitializedAsync()
    {
        content = await GetContentsResponse();
    }

    private async Task ContentInfoUpdate()
    {
        content = await GetContentsResponse();
    }

    private void FilterUpdatedAsync(FilterSettings filterSettings)
    {
        var selectedSocialMediaTypes = filterSettings.SocialMediaFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.SocialMediaType)
            .ToList();
        var selectedContentTypes = filterSettings.ContentTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.ContentType)
            .ToList();
        var selectedBrandsIds = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i=>i.Id)
            .ToList();
        var totalSelectedFiltersCount = 
            selectedSocialMediaTypes.Count + 
            selectedBrandsIds.Count + 
            selectedContentTypes.Count;

        var itemsToShow = content.Items
            .Where(i => 
                (selectedSocialMediaTypes.Contains(i.SocialMediaType) || selectedSocialMediaTypes.Count == 0) &&
                (selectedContentTypes.Contains(i.Type) || selectedContentTypes.Count == 0) &&
                (selectedBrandsIds.Contains(i.Brand.Id)  || selectedBrandsIds.Count == 0));

        foreach (var item in content.Items)
        {
            if (totalSelectedFiltersCount == 0)
            {
                item.IsVisible = true;
                continue;
            }
            if (itemsToShow.Contains(item))
            {
                item.IsVisible = true;
            }
            else
            {
                item.IsVisible = false;
            }
        }
    }

    private async Task<GetContentsResponse> GetContentsResponse()
    {
        return await ApiClient.Get<GetContentsResponse>(TokenProvider, "content");
    }
}
@page "/content/add"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Content
@using Pds.Core.Enums
@using Pds.Web.Common
@using static Pds.Web.Common.TitleExtension 

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Добавление контента")</Title>

<h4 class="card-header d-flex justify-content-between align-items-center">
    Добавление контента
    <button @onclick="GoBack" class="btn btn-primary" >Назад</button>
</h4>
@if (brands == null || clients == null || persons == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmitAsync">
        <div class="form-group">
            <InputRadioGroup Name="brand" @bind-Value="content.BrandId">
                @foreach (var brand in brands)
                {
                    var id = $"brand_{brand.Id.ToString()}";
                    <InputRadio Name="brand" class="btn-check" Value="brand.Id" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">@brand.Name</label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <InputRadioGroup Name="social-media-type" @bind-Value="content.SocialMediaType">
                @foreach (var socialMediaType in (SocialMediaType[])Enum
                    .GetValues(typeof(SocialMediaType)))
                {
                    var id = $"sm_type_{socialMediaType.ToString()}";
                    <InputRadio Name="social-media-type" class="btn-check" Value="socialMediaType" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @EnumsTranslator.SocialMediaTypeToRu(socialMediaType)
                    </label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <InputRadioGroup Name="type" @bind-Value="content.Type">
                @foreach (var type in (ContentType[])Enum
                    .GetValues(typeof(ContentType)))
                {
                    var id = $"type_{type.ToString()}";
                    <InputRadio Name="type" class="btn-check" Value="type" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @EnumsTranslator.ContentTypeToRu(type)
                    </label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <label for="title" class="form-label label-required">Заголовок</label>
            <InputText class="form-control" id="title" @bind-Value="content.Title"/>
        </div>

        <div class="form-group">
            @if (!content.IsFree)
            {
                <label for="bill_cost" class="form-label label-required">Стоимость USD:</label>
                <InputNumber class="form-control bill-cost" id="bill_cost" @bind-Value="content.Bill.Value"/>
            }

            <InputCheckbox name="isFree" class="btn-check" @bind-Value="content.IsFree" Id="content_is_free"/>
            <label class="btn btn-secondary btn-free btn-sm" for="content_is_free">Бесплатно</label>

            <label for="release_date" class="form-label label-required">Когда:</label>
            <InputDate class="form-control release-date" id="release_date" @bind-Value="content.ReleaseDate"/>
            
            <label for="release_date" class="form-label">Продлится до:</label>
            <InputDate class="form-control release-date" id="release_date" @bind-Value="content.EndDate"/>
        </div>

        @if (!content.IsFree)
        {
            <div class="form-group">
                <label for="clients" class="form-label label-required">Клиент</label>
                <InputSelect class="form-control" id="clients" @bind-Value="content.Bill.ClientId">
                    @foreach (var client in clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <label for="bill_contact_name" class="form-label label-required">ФИО представителя</label>
                <InputText class="form-control" id="bill_contact_name" @bind-Value="content.Bill.ContactName"/>
            </div>

            <div class="form-group">
                <label for="bill_contact" class="form-label label-required">Контакт представителя</label>
                <InputText class="form-control" id="bill_contact" @bind-Value="content.Bill.Contact"/>
                <div class="contact-type">
                    <InputRadioGroup Name="contact-type" @bind-Value="content.Bill.ContactType">
                        @foreach (var type in (ContactType[])Enum
                            .GetValues(typeof(ContactType)))
                        {
                            var id = $"contact-type{type.ToString()}";
                            <InputRadio Name="contact-type" class="btn-check" Value="type" id="@id"/>
                            <label class="btn btn-secondary btn-sm" for="@id">
                                @EnumsTranslator.ContactTypeToRu(type)
                            </label>
                        }
                    </InputRadioGroup>
                </div>
            </div>
        }

        <div class="form-group">
            <label for="comment" class="form-label">Комментарий</label>
            <InputTextArea class="form-control" id="comment" @bind-Value="content.Comment" rows="3"/>
        </div>

        <div class="form-group">
            <label for="persons" class="form-label">Персона</label>
            <InputSelect class="form-control" id="persons" @bind-Value="content.PersonId">
                @foreach (var person in persons)
                {
                    <option value="@person.Id">@person.FullName</option>
                }
            </InputSelect>
        </div>

        <ObjectGraphDataAnnotationsValidator />
        <ValidationSummary/>

        <div class="form-group d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-success" disabled="@isCreateButtonDisabled">Создать</button>
        </div>
    </EditForm>
}

@code {
    private CreateContentRequest content = new ()
    {
        BrandId = Guid.Parse("5aa23fa2-4b73-4a3f-c3d4-08d8d2705c5f"), //Default АйТиБорода
        Type = ContentType.Integration, //Default
        SocialMediaType = SocialMediaType.YouTube,  //Default
        Bill = new ContentBillDto()
        {
            ContactType = ContactType.Telegram //Default
        }
    };

    private EditContext editContext;
    private List<BrandForRadioboxGroupDto> brands;
    private List<ClientForLookupDto> clients;
    private List<PersonForLookupDto> persons;
    private bool isCreateButtonDisabled;
    private ContentBillDto fakeBill = new()
    {
        ContactType = ContactType.Telegram,
        ClientId = Guid.NewGuid(),
        Value = 11,
        Contact = "iamitbeard",
        ContactName = "Иван Иванович"
    };
    
    protected override async Task OnInitializedAsync()
    {
        isCreateButtonDisabled = false;
        content.ReleaseDate = GetCurrentDateWithoutOffset();
        editContext = new EditContext(content);
        brands = await GetBrands();
        clients = await GetClients();
        persons = await GetPersons();
    }

    private async Task HandleSubmitAsync()
    {
        if (content.IsFree)
        {
            content.Bill = fakeBill;
        }

        var isValid = editContext.Validate();

        if (isValid)
        {
            isCreateButtonDisabled = true;
            content.Bill = content.IsFree ? null : content.Bill;
            await ApiClient.Post<object, CreateContentRequest>(TokenProvider, "content", content);
            NavigationManager.NavigateTo("/content");
        }
    }

    private async Task<List<BrandForRadioboxGroupDto>> GetBrands()
    {
        return await ApiClient.Get<List<BrandForRadioboxGroupDto>>(TokenProvider, "content/get-brands");
    }

    private async Task<List<ClientForLookupDto>> GetClients()
    {
        return await ApiClient.Get<List<ClientForLookupDto>>(TokenProvider, "content/get-clients");
    }

    private async Task<List<PersonForLookupDto>> GetPersons()
    {
        return await ApiClient.Get<List<PersonForLookupDto>>(TokenProvider, "content/get-persons");
    }

    private DateTime GetCurrentDateWithoutOffset()
    {
        var date = DateTime.Now.Date;
        return new DateTime(date.Ticks);
    }
}
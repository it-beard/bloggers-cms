@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Content
@using Pds.Core.Enums

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<div class="panel panel-default actions-panel">
    @if (CurrentContent.Status == ContentStatus.Active)
    {
        <button title="Редактировать" class="btn btn-primary" @onclick="OnEdit">
            <i class="bi bi-pencil-fill"></i>
            Редактировать
        </button>
    }

    @if (CurrentContent.Bill != null && CurrentContent.Status == ContentStatus.Active && CurrentContent.Bill.Status == BillStatus.Active)
    {
        <button title="Оплатить" class="btn btn btn-dark" @onclick="OnPay">
            <i class="bi bi-credit-card-2-back"></i>
            Оплатить
        </button>
    }

    @if (CurrentContent.Status == ContentStatus.Archived)
    {
        <button title="Разархивировать" class="btn btn-warning" @onclick="OnUnarchiveAsync">
            <i class="bi bi-patch-plus-fill"></i>
            Разархивировать
        </button>
    }

    @if (CurrentContent.Status == ContentStatus.Active && (CurrentContent.Bill == null || CurrentContent.Bill.Status == BillStatus.Paid))
    {
        <button title="Архивировать" class="btn btn-warning" @onclick="OnArchiveAsync">
            <i class="bi bi-archive-fill"></i>
            Архивировать
        </button>
    }

    @if (CurrentContent.Status == ContentStatus.Active && (CurrentContent.Bill == null || CurrentContent.Bill.Status == BillStatus.Active))
    {
        <button title="Удалить" class="btn btn-danger" @onclick="OnDeleteAsync">
            <i class="bi bi-trash-fill"></i>
            Удалить
        </button>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnContentUpdate { get; set; }
    [Parameter]
    public GetContentResponse CurrentContent { get; set; }

    private void OnEdit()
    {
        NavigationManager.NavigateTo($"/content/{CurrentContent.Id}/edit");
    }

    private async Task OnDeleteAsync()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите удалить \"{CurrentContent.Title}\"?");
        if (confirmed)
        {
            await ApiClient.Delete<object>(TokenProvider, $"content/{CurrentContent.Id}");
            await OnContentUpdate.InvokeAsync(); // Update UI
        }
    }

    private void OnPay()
    {
        NavigationManager.NavigateTo($"/content/{CurrentContent.Id}/pay");
    }

    private async Task OnArchiveAsync()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите архивировать \"{CurrentContent.Title}\"?");
        if (confirmed)
        {
            await ApiClient.Put<object, object>(TokenProvider, $"content/{CurrentContent.Id}/archive", null);
            await OnContentUpdate.InvokeAsync(); // Update UI
        }
    }

    private async Task OnUnarchiveAsync()
    {
        await ApiClient.Put<object, object>(TokenProvider, $"content/{CurrentContent.Id}/unarchive", null);
        await OnContentUpdate.InvokeAsync(); // Update UI
    }
}
@page "/content"
@inherits BasePageComponent
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using static Pds.Web.Common.TitleExtension
@using System.Linq
@using Pds.Api.Contracts.Controllers.Content.GetContents
@using Pds.Api.Contracts.Paging
@using Pds.Core.Extensions
@using Pds.Web.Components.Sorting.QueryCreators
@using Pds.Web.Components.Sorting.QueryCreators.Content
@using FilterSettings = Pds.Web.Models.Content.FilterSettings
@using Pds.Web.Pages.Content.Components

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Контент")</Title>

@if (content == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        <span>
            Лента контента
            <span class="title-overall-info pre-span">
                @($"{totalItems} шт. / ${totalItemsCost:N0}")
            </span>
        </span>
        <a href="/content/add" class="btn btn-success">Добавить</a>
    </h4>
    <Filter OnFilterUpdate="@OnFilterUpdate" OnSearch="@OnSearch"></Filter>
    @if (isFilterLoaded)
    {
        <table class="table">
            <thead>
            <tr>
                <th class="release-date-header">
                    <SortingComponent
                        TField="ContentFieldName"
                        OnSortColumn="OnSort"
                        FieldName="ContentFieldName.ReleaseDate">
                        Когда
                    </SortingComponent>
                </th>
                <th>Название</th>
                @if (currentFilterSettings.BrandFilterItems.Count(f => f.IsSelected) != 1)
                {
                    <th>Бренд</th>
                }
                <th>Инфо</th>
                <th>Соцсеть</th>
                <th>Тип</th>
                <th class="bill-cost-header">
                    <SortingComponent
                        TField="ContentFieldName"
                        OnSortColumn="OnSort"
                        FieldName="ContentFieldName.BillValue">
                        Сколько
                    </SortingComponent>
                </th>
                <th class="text-center actions-header">Действия</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in filteredContent)
            {
                <tr class="@ContentHelper.GetContentBgColorClass(item.Status, item.Bill, item.IsFilmed)">
                    <td class="release-date-row">
                        @if (item.EndDate != null)
                        {
                            <div>
                                <span class=" no-wrap" title="@item.EndDate.Value.Date.ToLongStringDate()">
                                    @item.EndDate.Value.Date.ToShortStringDateWithDay()
                                </span>
                            </div>
                        }
                        <div>
                            <span class="no-wrap" title="@item.ReleaseDate.Date.ToLongStringDate()">
                                @item.ReleaseDate.Date.ToShortStringDateWithDay()
                            </span>
                        </div>
                    </td>
                    <td class="title-row">
                        <a class="custom-link" href="content/@item.Id">@item.Title</a>
                    </td>
                    @if (currentFilterSettings.BrandFilterItems.Count(f => f.IsSelected) != 1)
                    {
                        <td>
                            @item.Brand.Name
                        </td>
                    }
                    <td>
                            @if (item.Client != null)
                            {
                                <div>
                                    <span class="small-label">Клиент:</span>
                                    <a class="custom-link" href="clients/@item.Client.Id">@item.Client.Name</a>
                                </div>
                            }

                        <div>
                            @if (item.Person != null)
                            {
                                <div>
                                    <span class="small-label">Персона:</span>
                                    <a class="custom-link" href="persons/@item.Person.Id">@item.Person.FirstName @item.Person.LastName</a>
                                </div>
                            }
                        </div>
                    </td>
                    <td>
                        @EnumsTranslator.SocialMediaTypeToRu(item.SocialMediaType)
                    </td>
                    <td>
                        @EnumsTranslator.ContentTypeToRu(item.Type)
                    </td>
                    <td class="bill-cost-row">
                        @if (item.Bill != null)
                        {
                            if (item.Bill.PaymentType != null)
                            {
                                <i class="@ContentHelper.GetPaymentTypeBgColorClass(item.Bill.PaymentType)">
                                    @EnumsTranslator.PaymentTypeToShortRu(item.Bill.PaymentType)
                                </i>
                            }
                            <span>@item.Bill.Value.ToString("N0")</span>
                        }
                        else
                        {
                            <span class="free-cost">бесплатно</span>
                        }
                    </td>
                    <td class="text-center actions-row">
                        <Actions OnActionsUpdate="@OnActionsUpdate" CurrentContent="@item"></Actions>
                    </td>
                </tr>
            }
            </tbody>
        </table>

        <CascadingValue Value="isMoveToFirstPage">
            <PagingComponent PageSizeList="@pageSizesList"
                             DefaultPageSize="@DefaultPageSite"
                             TotalItems="totalItems"
                             Radius="2"
                             OnPagination="OnPagination"/>
        </CascadingValue>
    }
}

@code {
    private GetContentsResponse content;
    private GetContentsContentDto[] filteredContent;

    private const int DefaultPageSite = 100;
    private readonly int[] pageSizesList = [5, 10, 25, 50, DefaultPageSite, 250, 500];
    private bool isMoveToFirstPage;
    private PageSettings currentPageSettings =
        new()
        {
            Offset = 0,
            Limit = DefaultPageSite
        };
    private OrderSetting<ContentFieldName>[] currentOrderSettings;

    private string currentSearchText;
    private FilterSettings currentFilterSettings;
    private int totalItems;
    private decimal totalItemsCost;
    private bool isFilterLoaded;

    protected override async Task OnInitializedAsync()
    {
        content = await GetContentsAsync();
    }

    private async Task<GetContentsResponse> GetContentsAsync()
    {
        return await ApiClient.Get<GetContentsResponse>(TokenProvider, "content");
    }

    private GetContentsContentDto[] GetFilteredContentsList(
        FilterSettings filterSettings,
        GetContentsResponse content,
        OrderSetting<ContentFieldName>[] orderSettings,
        PageSettings pageSettings,
        //by default always move to first page if filter changed
        bool isMoveToFirstPageParam = true)
    {
        //Filtering
        var selectedStatuses = filterSettings.ContentStatusFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.ContentStatus)
            .ToList();
        var selectedSocialMediaTypes = filterSettings.SocialMediaFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.SocialMediaType)
            .ToList();
        var selectedContentTypes = filterSettings.ContentTypeFilterItems
            .Where(i => i.IsSelected)
            .Select(i => i.ContentType)
            .ToList();
        var selectedBrandsIds = filterSettings.BrandFilterItems
            .Where(i => i.IsSelected)
            .Select(i=>i.Id)
            .ToList();

        var itemsToShow = content.Items
            .Where(i =>
                (selectedStatuses.Contains(i.Status) || selectedStatuses.Count == 0) &&
                (selectedSocialMediaTypes.Contains(i.SocialMediaType) || selectedSocialMediaTypes.Count == 0) &&
                (selectedContentTypes.Contains(i.Type) || selectedContentTypes.Count == 0) &&
                (selectedBrandsIds.Contains(i.Brand.Id)) &&
                (filterSettings.From != null && i.ReleaseDate.Date >= filterSettings.From.Value.Date || filterSettings.From == null) &&
                (filterSettings.To != null && i.ReleaseDate.Date <= filterSettings.To.Value.Date || filterSettings.To == null));

        var query = itemsToShow
            .AsQueryable();

        //Sorting
        if (orderSettings?.Length > 0)
        {
            var dictionary = new Dictionary<ContentFieldName, IOrderQuery<GetContentsContentDto, GetContentsContentDto>>
            {
                {ContentFieldName.ReleaseDate, new ContentReleaseDateOrderQueryCreator()},
                {ContentFieldName.BillValue, new ContentBillValueOrderQueryCreator()},
            };

            var queryCreator = new OrderQueryCreator<GetContentsContentDto, ContentFieldName>(dictionary);
            query = queryCreator.Create(orderSettings, query);
        }
        else
        {
            query = query
                .OrderByDescending(g => g.ReleaseDate);
        }

        //Search
        if (!string.IsNullOrWhiteSpace(currentSearchText))
        {
            var searchPredicate = new ContentsSearch()
                .GetSearchPredicate(currentSearchText.ToLower());
            query = query.Where(searchPredicate);
        }

        var contentList = query.ToArray();

        // Statistics
        totalItems = contentList.Length;
        totalItemsCost = contentList.Sum(i => i.Bill?.Value) ?? totalItemsCost;

        // Paging
        isMoveToFirstPage = isMoveToFirstPageParam;
        if (isMoveToFirstPage)
        {
            pageSettings.Offset = 0; // move results to start
        }
        contentList = contentList
            .Skip(pageSettings.Offset)
            .Take(pageSettings.Limit)
            .ToArray();


        return contentList;
    }

    private void OnPagination(PagingEventArgs settings)
    {
        currentPageSettings = new PageSettings
        {
            Limit = settings.PageSize,
            Offset = settings.PageOffSet
        };

        filteredContent = GetFilteredContentsList(
            currentFilterSettings,
            content,
            currentOrderSettings,
            currentPageSettings,
            false);
    }

    private void OnSort(OrderSetting<ContentFieldName> settings)
    {
        currentOrderSettings = new[]
        {
            settings
        };

        filteredContent = GetFilteredContentsList(
            currentFilterSettings,
            content,
            currentOrderSettings,
            currentPageSettings);
    }

    private void OnSearch(string searchText)
    {
        currentSearchText = searchText;
        filteredContent = GetFilteredContentsList(
            currentFilterSettings,
            content,
            currentOrderSettings,
            currentPageSettings);
    }

    private async Task OnActionsUpdate()
    {
        isFilterLoaded = false;
        content = await GetContentsAsync();
        OnFilterUpdate(currentFilterSettings);
    }

    private void OnFilterUpdate(FilterSettings filterSettings)
    {
        currentFilterSettings = filterSettings;
        filteredContent = GetFilteredContentsList(
            filterSettings,
            content,
            currentOrderSettings,
            currentPageSettings);
        isFilterLoaded = true;
    }
}
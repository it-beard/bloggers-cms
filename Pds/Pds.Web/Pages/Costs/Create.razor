@page "/costs/add"
@inherits BasePageComponent
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Cost
@using Pds.Core.Enums
@using Pds.Web.Common
@using static Pds.Web.Common.TitleExtension 

@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Добавление клиента")</Title>

@if (cost == null || contents == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <h4 class="card-header d-flex justify-content-between align-items-center">
        Фиксация расхода
        <button @onclick="GoBack" class="btn btn-primary"> Назад </button>
    </h4>

    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmitAsync">
        <div class="form-group">
            <InputRadioGroup Name="brand" @bind-Value="cost.BrandId">
                @foreach (var brand in brands)
                {
                    var id = $"brand_{brand.Id.ToString()}";
                    <InputRadio Name="brand" class="btn-check" Value="brand.Id" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">@brand.Name</label>
                }
            </InputRadioGroup>
        </div>
        
        <div class="form-group">
            <InputRadioGroup Name="cost-type" @bind-Value="cost.Type">
                @foreach (var costType in (CostType[])Enum
                    .GetValues(typeof(CostType)))
                {
                    var id = $"cost_type_{costType.ToString()}";
                    <InputRadio Name="cost-type" class="btn-check" Value="costType" Id="@id"/>
                    <label class="btn btn-secondary" for="@id">
                        @EnumsTranslator.CostTypeToRu(costType)
                    </label>
                }
            </InputRadioGroup>
        </div>

        <div class="form-group">
            <label for="cost_value" class="form-label  label-required">Сумма USD:</label>
            <InputNumber class="form-control cost-value" id="cost_value" @bind-Value="cost.Value"/>

            <label for="cost_date" class="form-label  label-required">Дата:</label>
            <InputDate class="form-control cost-date" id="cost_date" @bind-Value="cost.PaidAt"/>
        </div>

        <div class="form-group">
            <label for="comment" class="form-label">Комментарий</label>
            <InputTextArea class="form-control" id="comment" @bind-Value="cost.Comment" rows="3"/>
        </div>

        <div class="form-group">
            <label for="contents" class="form-label">Контент</label>
            <InputSelect class="form-control" id="contents" @bind-Value="cost.ContentId">
                @foreach (var content in contents)
                {
                    <option value="@content.Id">@content.Title</option>
                }
            </InputSelect>
        </div>

        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <div class="form-group d-grid gap-2 d-md-flex justify-content-md-end">
            <button type="submit" class="btn btn-success" disabled="@isCreateButtonDisabled">Записать</button>
        </div>
    </EditForm>
}

@code {
    private CreateCostRequest cost = new();
    private EditContext editContext;
    private bool isCreateButtonDisabled;
    private List<BrandForRadioboxGroupDto> brands;
    private List<ContentForLookupDto> contents;
    
    protected override async Task OnInitializedAsync()
    {
        await SetDefaultValues();
        editContext = new EditContext(cost);
    }
    
    private async Task HandleSubmitAsync()
    {
        var isValid = editContext.Validate();

        if (isValid)
        {
            isCreateButtonDisabled = true;
            await ApiClient.Post<object, CreateCostRequest>(TokenProvider, "costs", cost);
            NavigationManager.NavigateTo("/costs");
        }
    }

    private async Task<List<BrandForRadioboxGroupDto>> GetBrandsAsync()
    {
        return await ApiClient.Get<List<BrandForRadioboxGroupDto>>(TokenProvider, "content/get-brands");
    }

    private async Task<List<ContentForLookupDto>> GetContentsAsync()
    {
        return await ApiClient.Get<List<ContentForLookupDto>>(TokenProvider, "costs/get-contents");
    }

    private async Task SetDefaultValues()
    {
        isCreateButtonDisabled = false;
        cost.BrandId = Guid.Parse("5aa23fa2-4b73-4a3f-c3d4-08d8d2705c5f"); //Default АйТиБорода
        cost.PaidAt = GetCurrentDateWithoutOffset();
        brands = await GetBrandsAsync();
        contents = await GetContentsAsync();
    }

    private DateTime GetCurrentDateWithoutOffset()
    {
        var date = DateTime.Now.Date;
        return new DateTime(date.Ticks);
    }
}
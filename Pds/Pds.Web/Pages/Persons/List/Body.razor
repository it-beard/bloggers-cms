@page "/persons"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Web.Common
@using Api.Contracts.Paging
@using Web.Components.Sorting.QueryCreators
@using Pds.Web.Components.Sorting.QueryCreators.Person
@using static Pds.Web.Common.TitleExtension

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Персоны")</Title>

<h3 class="card-header d-flex justify-content-between align-items-center">
    Список персон
    <a href="/persons/add" class="btn btn-success">Добавить</a>
</h3>
@if (personsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <CascadingValue Value="isPagingStateHasChanged">
        <PagingComponent PageSizeList="pageSizesList"
                         TotalItems="personsInfo.Total"
                         Radius="2"
                         Pagination="Pagination" />
    </CascadingValue>

    <table class="table">
        <thead>
            <tr>
                <th>
                    
                    <SortingComponent TField="PersonsFieldName" 
                                      OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.FullName">Полное имя</SortingComponent>
                </th>
                <th>
                    <SortingComponent TField="PersonsFieldName"
                                      OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.Location">Локация</SortingComponent>
                </th>
                <th>Информация</th>
                <th>Ссылки</th>
                <th class="text-center actions">Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in personsList)
            {
                <tr>
                    <td>@person.FullName (@person.Rate)</td>
                    <td>@person.Location</td>
                    <td>@person.Info</td>
                    <td>
                        @foreach (var resource in person.Resources)
                        {
                            <div>
                                <a href="@resource.Url" target="_blank">@resource.Name</a>
                            </div>}
                    </td>
                    <td class="text-center">
                        <Actions OnPersonUpdate="@PersonsInfoUpdate" CurrentPerson="@person"></Actions>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GetPersonsResponse personsInfo;
    private PersonDto[] personsList;
    private readonly int[] pageSizesList = { 5, 10, 25, 50 };
    private bool isPagingStateHasChanged;
    private PageSettings pageSettings;
    private OrderSetting<PersonsFieldName>[] orderSettings;

    protected override async Task OnInitializedAsync()
    {
        pageSettings = new PageSettings
        {
            Limit = pageSizesList[0],
            Offset = 0
        };

        orderSettings = new[]
        {
            new OrderSetting<PersonsFieldName>()
        };

        await PersonsInfoUpdate();
        GetPersonsList();

    }

    private async Task PersonsInfoUpdate()
    {
        personsInfo = await GetPersonsInfo();
    }

    private async Task<GetPersonsResponse> GetPersonsInfo()
    {
        return await ApiClient.Get<GetPersonsResponse>(TokenProvider, "persons");
    }

    public void GetPersonsList()
    {
        var query = personsInfo.Items
            .AsQueryable();

        if (orderSettings?.Length > 0)
        {
            var dictionary = new Dictionary<PersonsFieldName, IOrderQuery<PersonDto>>
            {
                    {PersonsFieldName.FullName, new PersonFullNameOrderQueryCreator()},
                    {PersonsFieldName.Rating, new PersonRatingOrderQueryCreator()},
                    {PersonsFieldName.Location, new PersonLocationOrderQueryCreator()}
                };

            var queryCreator = new PersonOrderQueryCreator(dictionary);
            query = queryCreator.Create(orderSettings, query);
        }
        else
        {
            query = query
                .OrderByDescending(p => p.Rate)
                .ThenBy(p => p.FullName);
        }

        query.ToArray();

        personsList = query.Skip(pageSettings.Offset).Take(pageSettings.Limit).ToArray();
    }

    private void Pagination(PagingEventArgs settings)
    {
        isPagingStateHasChanged = default;
        pageSettings = new PageSettings
        {
            Limit = settings.PageSize,
            Offset = settings.PageOffSet
        };

        GetPersonsList();
    }

    private void SortPersons(OrderSetting<PersonsFieldName> settings)
    {
        isPagingStateHasChanged = true;
        pageSettings.Offset = 0;

        orderSettings = new[]
        {
            settings
        };

        GetPersonsList();
    }
}
@page "/persons"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Web.Common
@using Pds.Web.Pages.Persons.List
@using Api.Contracts.Paging
@using Pds.Web.Components
@using static Pds.Web.Common.TitleExtension

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<Title>@WithSuffix("Персоны")</Title>

<h3 class="card-header d-flex justify-content-between align-items-center">
    Список персон
    <a href="/persons/add" class="btn btn-success">Добавить</a>
</h3>
@if (personsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <PagingComponent 
                     CurrentPage="currentPage" 
                     PageSizeList="pageSizesList"
                     TotalItems="personsInfo.Total" 
                     Radius="2" 
                     Pagination="Pagination" />

    <table class="table">
        <thead>
            <tr>
                <th>
                    <SortingComponent OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.FullName">Полное имя</SortingComponent>
                </th>
                <th>
                    <SortingComponent OnSortPersons="SortPersons"
                                      FieldName="PersonsFieldName.Location">Локация</SortingComponent>
                </th>
                <th>Информация</th>
                <th>Ссылки</th>
                <th class="text-center actions">Действия</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in personsInfo.Items)
            {
                <tr>
                    <td>@person.FullName (@person.Rate)</td>
                    <td>@person.Location</td>
                    <td>@person.Info</td>
                    <td>
                        @foreach (var resource in person.Resources)
                        {
                            <div>
                                <a href="@resource.Url" target="_blank">@resource.Name</a>
                            </div>}
                    </td>
                    <td class="text-center">
                        <Actions OnPersonUpdate="@PersonsInfoUpdate" CurrentPerson="@person"></Actions>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private GetPersonsResponse personsInfo;
    private readonly int[] pageSizesList = { 5, 10, 25, 50 };
    private int pageSize;
    private int currentPage;

    protected override async Task OnInitializedAsync()
    {
        currentPage = 1;
        personsInfo = await GetPersonsInfo();
    }

    private async Task PersonsInfoUpdate()
    {
        personsInfo = await GetPersonsInfo();
    }

    private async Task<GetPersonsResponse> GetPersonsInfo(OrderSetting<PersonsFieldName>[] orderSettings = null, PageSettings pageSettings = null)
    {

        var request = new GetPersonsRequest
        {
            PageSettings = pageSettings ?? new PageSettings
            {
                Limit = pageSizesList[0],
                Offset = 0
            },
            OrderSettings = orderSettings ?? new[]
            {
                new OrderSetting<PersonsFieldName>()
            }
        };

        var response = await ApiClient.Post<GetPersonsResponse, GetPersonsRequest>(TokenProvider, "persons/search", request);

        return response.Payload;
    }

    private async Task Pagination(PaginationSettings paggingSettings)
    {
        currentPage = paggingSettings.CurrentPage;
        pageSize = paggingSettings.PageSize;
        var pageSettings = new PageSettings() { Limit = pageSize, Offset = paggingSettings.PageOffSet };

        personsInfo = await GetPersonsInfo(pageSettings: pageSettings);
    }

    private async Task SortPersons(SortingEventArgs eventArgs)
    {
        currentPage = 1;
        var orderSettings = new List<OrderSetting<PersonsFieldName>>();

        orderSettings.Add(new OrderSetting<PersonsFieldName>
        {
            Ascending = eventArgs.Ascending,
            FieldName = eventArgs.FieldName
        });

        var pageSettings = new PageSettings() { Limit = pageSize, Offset = 0 };
        personsInfo = await GetPersonsInfo(orderSettings.ToArray());
    }
}
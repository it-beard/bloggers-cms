@using Pds.Api.Contracts.Person
@using Pds.Core.Enums
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<div class="panel panel-default actions-panel">
    <button title="Редактировать" class="btn btn-primary btn-sm" @onclick="OnEdit">
        <i class="bi bi-pencil-fill"></i>
    </button>

    @if (CurrentPerson.Status == PersonStatus.Archived)
    {
        <button title="Разархивировать" class="btn btn-success btn-sm" @onclick="OnUnarchive">
            <i class="bi bi-patch-plus-fill"></i>
        </button>
    }

    @if (CurrentPerson.Status == PersonStatus.Active)
    {
        <button title="Архивировать" class="btn btn-warning btn-sm" @onclick="OnArchive">
            <i class="bi bi-archive-fill"></i>
        </button>
    }

    @if (CurrentPerson.Status == PersonStatus.Archived)
    {
        <button title="Удалить" class="btn btn-danger btn-sm delete-button" @onclick="OnDelete">
            <i class="bi bi-trash-fill"></i>
        </button>
    }
</div>

@code {
    [Parameter]
    public EventCallback OnPersonUpdate { get; set; }
    [Parameter]
    public PersonDto CurrentPerson { get; set; }

    private void OnEdit()
    {
        NavigationManager.NavigateTo($"/persons/{CurrentPerson.Id}");
    }

    private async Task OnDelete()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите удалить {CurrentPerson.FullName}?");
        if (confirmed)
        {
            await ApiClient.Delete<object>(TokenProvider, $"persons/{CurrentPerson.Id}");
            await OnPersonUpdate.InvokeAsync(); // Update UI
        }
    }

    private async Task OnArchive()
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", $"Уверены, что хотите архивировать {CurrentPerson.FullName}?");
        if (confirmed)
        {
            await ApiClient.Put<object, object>(TokenProvider, $"persons/{CurrentPerson.Id}/archive", null);
            await OnPersonUpdate.InvokeAsync(); // Update UI
        }
    }

    private async Task OnUnarchive()
    {
        await ApiClient.Put<object, object>(TokenProvider, $"persons/{CurrentPerson.Id}/unarchive", null);
        await OnPersonUpdate.InvokeAsync(); // Update UI
    }
}
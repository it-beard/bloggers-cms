@page "/persons"
@attribute [Authorize]
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Api.Contracts.Person
@using Pds.Web.Common
@using Api.Contracts.Paging

@inject IApiClient ApiClient
@inject IAccessTokenProvider TokenProvider

<h3 class="card-header d-flex justify-content-between align-items-center">
    Список персон
    <a href="/persons/add" class="btn btn-success" >Добавить</a>
</h3>
@if (personsInfo == null)
{
    <p>
        <em>Загрузка...</em>
    </p>
}
else
{
    <PagingComponent PageSizeList="pageSizesList" TotalItems="personsInfo.Total" Radius="2" Pagination="Pagination" />

    <table class="table">
        <thead>
        <tr>
            <th>Полное имя</th>
            <th>Локация</th>
            <th>Информация</th>
            <th>Ссылки</th>
            <th class="text-center actions">Действия</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var person in personsInfo.Items)
        {
            <tr>
                <td>@person.FullName (@person.Rate)</td>
                <td>@person.Location</td>
                <td>@person.Information</td>
                <td>
                    @foreach (var resource in person.Resources)
                    {
                        <div>
                            <a href="@resource.Url" target="_blank">@resource.Name</a>
                        </div>
                    }
                </td>
                <td class="text-center">
                    <Actions OnPersonUpdate="@PersonsInfoUpdate" CurrentPerson="@person"></Actions>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private GetPersonsResponse personsInfo;
    private readonly int[] pageSizesList = { 5, 10, 25, 50 };
    private int pageSize;
    private int pageOffset;

    protected override async Task OnInitializedAsync()
    {
      personsInfo = await GetPersonsInfo();
    }

    private async Task PersonsInfoUpdate()
    {
      personsInfo = await GetPersonsInfo();
    }

    private async Task<GetPersonsResponse> GetPersonsInfo()
    {
      var request = new GetPersonsRequest
      {
        PageSettings = new Api.Contracts.Paging.PageSettings
        {
          Limit = 10,
          Offset = 0
        }
      };

      return await ApiClient.Post<GetPersonsResponse, GetPersonsRequest>(TokenProvider, "persons/search", request);
    }

    private async Task Pagination(PaginationSettings paggingSettings)
    {
      pageOffset = paggingSettings.PageOffSet;
      pageSize = paggingSettings.PageSize;

      var requestBody = new GetPersonsRequest()
      {
        PageSettings = new PageSettings() { Limit = pageSize, Offset = pageOffset },
        OrderSettings = new OrderSetting<PersonsFieldName>[] {
                new OrderSetting<PersonsFieldName>{Ascending = true, FieldName = PersonsFieldName.FullName}
                },
        FilterSettings = new FilterSettings() { Search = "" }
      };

      personsInfo = await ApiClient.Post<GetPersonsResponse, GetPersonsRequest>(TokenProvider, "persons/search", requestBody);
    }
}
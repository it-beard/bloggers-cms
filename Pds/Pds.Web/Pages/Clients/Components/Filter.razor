@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Pds.Core.Enums
@using Pds.Web.Common
@using Microsoft.AspNetCore.Components
@using AutoMapper
@using Pds.Api.Contracts.Controllers
@using Pds.Web.Models.Client

@namespace Pds.Web.Pages.Clients.Components

@inject IAccessTokenProvider tokenProvider
@inject IApiClient apiClient
@inject StateContainer stateContainer
@inject Blazored.LocalStorage.ILocalStorageService localStorage

@if (filterSettings == null || stateContainer.Settings == null)
{
    <p>
        <em>Загрузка фильтр...</em>
    </p>
}
else
{
    var filterButtonClass = isMobileFilterOpen ? "bi-caret-up-fill" : "bi-caret-down-fill";
    var filterPaddingFixClass = isMobileFilterOpen ? string.Empty : "filter-padding-fix";
    var openFilterClass = isMobileFilterOpen ? "filter-main-open" : string.Empty;

    <div class="@($"filter {filterPaddingFixClass}")">
        <div class="filter-header">

            <button title="Фильтр" class="btn btn-success btn-sm button-filter" @onclick="OnButtonFilterClick">
                <i class="@($"bi {filterButtonClass}")"></i>
            </button>
            <SearchComponent Search="SearchOnChanged"/>
        </div>

        <div class="@($"filter-main {openFilterClass}")">
            <EditForm EditContext="@editContext">
                <div class="form-group no-wrap">
                    <span class="filter-row-title">Статус:</span>
                    @foreach (var statusFilterItem in filterSettings.ClientStatusFilterItems)
                    {
                        var id = $"status_{statusFilterItem.ClientStatus.ToString()}";
                        <InputCheckbox name="@id" class="btn-check" @bind-Value="statusFilterItem.IsSelected" Id="@id"/>
                        <label class="btn btn-secondary" for="@id">
                            @EnumsTranslator.ClientStatusToRu(statusFilterItem.ClientStatus)
                        </label>
                    }
                </div>
                <div class="form-group no-wrap">
                    <span class="filter-row-title">Оплачивали:</span>
                    <InputDate class="form-control from-date" id="from_date" @bind-Value="filterSettings.From"/>
                    <span class="filter-date-separator">&lt; с | по &gt; </span>
                    <InputDate class="form-control to-date" id="to_date" @bind-Value="filterSettings.To"/>
                </div>
            </EditForm>
        </div>
    </div>
}

@code {

    [Parameter]
    public EventCallback<FilterSettings> OnFilterUpdate { get; set; }
    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    private EditContext editContext;
    private FilterSettings filterSettings { get; set; }
    private bool isMobileFilterOpen;
    private readonly string savedSettingsLocalStorageKey = "clientsFilterSettings";

    protected override async Task OnInitializedAsync()
    {
        filterSettings = await GetFilterSettings();
        editContext = new EditContext(filterSettings);
        editContext.OnFieldChanged += EditContext_OnFieldChanged;
        await OnFilterUpdate.InvokeAsync(filterSettings);
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        localStorage.SetItemAsync(savedSettingsLocalStorageKey, filterSettings);
        OnFilterUpdate.InvokeAsync(filterSettings);
    }

    private void SearchOnChanged(string searchText)
    {
        OnSearch.InvokeAsync(searchText);
    }

    private async Task<FilterSettings> GetFilterSettings()
    {
        var filter = new FilterSettings
        {
            ClientStatusFilterItems = ((ClientStatus[]) Enum.GetValues(typeof(ClientStatus)))
                .Select(gType =>
                    new ClientStatusFilterItem()
                    {
                        ClientStatus = gType,
                        IsSelected = false
                    })
                .ToList()
        };

        SetDefaultFilterValues(ref filter);
        filter = await GetSavedFilterValues(filter);

        return filter;
    }

    private void SetDefaultFilterValues(ref FilterSettings filter)
    {
        filter.ClientStatusFilterItems
            .First(u => u.ClientStatus == ClientStatus.Active)
            .IsSelected = true;
    }

    private async Task<FilterSettings> GetSavedFilterValues(FilterSettings filter)
    {
        return await LocalStorageFilterHelper<FilterSettings>.GetSavedFilterValues(filter, localStorage, savedSettingsLocalStorageKey);
    }

    private async Task<List<BrandDto>> GetBrands()
    {
        return await apiClient.Get<List<BrandDto>>(tokenProvider, "content/get-brands");
    }

    private void OnButtonFilterClick()
    {
        isMobileFilterOpen = !isMobileFilterOpen;
    }
}